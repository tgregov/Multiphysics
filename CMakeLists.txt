PROJECT(MULTIPHYSICS CXX)
CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

# build type is "" by default in Linux
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING "" FORCE)
ENDIF()

MESSAGE(STATUS "Build Type is " ${CMAKE_BUILD_TYPE})

# put all generated files in a single folder (required in windows for exe linked to dlls)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin/ CACHE PATH "")
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin/ CACHE PATH "")
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

IF(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS)
    ADD_DEFINITIONS(-D_USE_MATH_DEFINES) # for M_PI
ENDIF()

IF(APPLE)
    # on macOS, do not give priority to frameworks/apps
    SET(CMAKE_FIND_APPBUNDLE LAST)
    SET(CMAKE_FIND_FRAMEWORK LAST)
ENDIF()

FIND_PACKAGE(OpenMP REQUIRED)
IF(OPENMP_CXX_FOUND)
    MESSAGE(STATUS "OpenMP found: " ${OpenMP_CXX_LIBRARIES})
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
ELSE()
	MESSAGE(FATAL_ERROR "OpenMP not found !")
ENDIF()

IF(CMAKE_CXX_COMPILER_ID MATCHES GNU)
    ADD_COMPILE_OPTIONS(-Wall -Wextra -pedantic-errors -Wold-style-cast -Wduplicated-cond -Wduplicated-branches -Wlogical-op -Wnull-dereference -Wuseless-cast -Wshadow)
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES CLANG)
    ADD_COMPILE_OPTIONS(-Wall -Wextra -pedantic-errors -Wold-style-cast -Wnull-dereference -Wshadow)
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    ADD_COMPILE_OPTIONS(/W4 /WX /wd4251)
ENDIF()

INCLUDE(GenerateExportHeader)
ADD_SUBDIRECTORY(srcs)
ENABLE_TESTING()

